<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
<mapper namespace="Member">
	
	<select id="emailCheck" resultType="int">
		select count(*) from member where emailid = #{value}
	</select>
	
	<select id="nickNameCheck" resultType="int">
		select count(*) from member where nick = #{value}
	</select>
	
	<select id="phoneCheck" resultType="int">
		select count(*) from member where phone = #{value}
	</select>
	
	<insert id="normalSignup">
		insert into member (seq, emailid, pw, nick, phone, gender, violation, photo, signup_date) values (mem_seq.nextval, #{emailID}, #{encryptPw}, #{nick}, #{phone}, #{gender}, 0, '\images\default_profileqwerkjhgdiute.jpg', default)
	</insert>
	
	<select id="normalLoginCheck" resultType="int">
		select count(*) from member where emailid = #{emailID} and pw = #{encryptPw}
	</select>
	
	<select id="normalLoginSelectAll" resultType="kh.spring.dto.MemberDTO">
		select * from member where emailid = #{emailID} and pw = #{encryptPw}
	</select>
	
	<update id="findPwChange">
		update member set pw = #{encryptPw} where emailid = #{findPwTargetEmail}
	</update>

	<!-- 카카오 로그인시작 -->
	<select id="kakaoLoginLookup" resultType="int">
		select count(*) from member where sns_division = #{value}
	</select>
	
	<select id="kakaoLoginSelectAll" resultType="kh.spring.dto.MemberDTO">
		select * from member where sns_division = #{value}
	</select>
	
	<insert id="kakaoSignup">
		insert into member (seq, emailid, nick, violation, sns_division, photo, signup_date) values (mem_seq.nextval, #{kakaoEmail}, #{kakaoNick}, 0, #{kakaoId}, '\images\default_profileqwerkjhgdiute.jpg', default)
	</insert>
	
	<!-- 마이페이지 -->
	<select id="myInfoSelectAll" resultType="kh.spring.dto.MemberDTO">
		select * from member where seq = #{value}
	</select>
	
	<update id="myInfoChangeOk">
		update member set nick = #{nick}, gender = #{gender}, age = #{age}, phone = #{phone}, ph_open = #{ph_Open}, preference = #{preference}, text = #{text}, photo = #{photo} where seq = #{seq}
	</update>
	
	<update id="myInfoChangeOkNoFile">
		update member set nick = #{nick}, gender = #{gender}, age = #{age}, phone = #{phone}, ph_open = #{ph_Open}, preference = #{preference}, text = #{text} where seq = #{seq}
	</update>
	
	<update id="myInfoPwChange">
		update member set pw = #{encryptPw} where seq = #{loginSeq}
	</update>
	
	<delete id='deleteAccount'>
		delete from member where seq = #{value}
	</delete>
	
	<select id="existingPhotoStr" resultType="String">
		select photo from member where seq = #{value}
	</select>
	
	<!-- 찜목록 시작 -->
	<select id="mySaveListSeq" resultType="Integer">
		select area_seq from (select saved.*, row_number() over(order by seq desc)rn from saved where mem_seq = #{loginSeq}) where (rn between #{start} and #{end})
	</select>
	
	<select id="savedAreaGrade" resultType="String">
		select round(avg(score),2) from area_reply where area_seq = ${value}
	</select>
	
	<!-- 게시글 관리 -->
	<select id="getMyPostCountC" resultType="int">
		select count(*) from company_board where mem_seq = ${loginSeq} and title like '%'||#{searchTitle}||'%'
	</select>
	<select id="getMyPostCountT" resultType="int">
		select count(*) from tour_board where mem_seq = ${loginSeq} and title like '%'||#{searchTitle}||'%'
	</select>
	
	<select id="getMyPostList" resultType="kh.spring.dto.MyPostDTO">
		SELECT *
		FROM(
		SELECT seq, title, view_count, rec_count, rep_count, writen_date, board_num, ROW_NUMBER() OVER(ORDER BY seq desc) rn
		FROM(
		SELECT seq, title, view_count, rec_count, rep_count, writen_date, board_num
		FROM tour_board
		WHERE mem_seq = #{loginSeq} and title like '%'||#{searchTitle}||'%'
		UNION ALL
		SELECT seq, title, view_count, rec_count, rep_count, writen_date, board_num
		FROM company_board
		WHERE mem_seq = #{loginSeq} and title like '%'||#{searchTitle}||'%'))
		WHERE rn BETWEEN #{start} and #{end}
		ORDER BY writen_date desc
	</select>
	
	<insert id="insertReaction">
		insert into reactions values(#{seq}, #{mem_seq}, #{loginSeq}, #{title}, #{nick}, #{board_num}, #{reaction}, #{reactioner}, default)
	</insert>
	
	<select id="selectReactions" resultType="kh.spring.dto.ReactionsDTO">
		select * from (select reactions.*, row_number() over(order by time desc)rn from reactions where mem_seq = #{value}) where rn between 1 and 7
	</select>
	
	<delete id="reactionRemove">
		delete from reactions where mem_seq = #{value}
	</delete>
	
</mapper>